loadrt xor2 names=xor2.green
loadrt siggen num_chan=1


loadrt and2  names=and2.run_pause,and2.resume,and2.step,and2.run_step_resume,and2.paused,and2.idle,and2.touch_probe,and2.tool_length
# loadrt or2 count=1
# toggle2nist.1 machine on/off
# toggle2nist.2 lights on/off
loadrt toggle2nist count=2
loadrt toggle count=5

addf and2.run_pause                   servo-thread
addf and2.resume                   servo-thread
addf and2.run_step_resume                   servo-thread
addf and2.step                   servo-thread
addf and2.idle                   servo-thread
addf and2.paused                   servo-thread
addf xor2.green                   servo-thread
addf toggle2nist.0            servo-thread
addf toggle2nist.1            servo-thread
addf or2.pause-resume                    servo-thread
addf toggle.0                 servo-thread
addf toggle.1                 servo-thread
addf toggle.2                 servo-thread
addf toggle.3                 servo-thread
addf toggle.4                 servo-thread
addf siggen.0.update          servo-thread

# External Program Pause/Resume and Run/Step Buttons
# Pause/Resume Section
net pause-resume-btn and2.run_pause.in0 and2.resume.in0 <= hm2_7i76e.0.7i76.0.0.input-08-not
net pause-on toggle2nist.0.is-on <= and2.run_pause.in1 <= and2.step.in1 <= and2.paused.in1 <= halui.program.is-paused
net run-on and2.resume.in1 <= xor2.green.in0 <= halui.program.is-running
net pause-sig or2.pause-resume.in0 <= and2.run_pause.out
net resume-sig or2.pause-resume.in1 <= and2.resume.out
net toggle-ok toggle.0.in <= or2.pause-resume.out
net togglesig toggle2nist.0.in <= toggle.0.out
net toggleon halui.program.pause <= toggle2nist.0.on
net toggleoff halui.program.resume <= toggle2nist.0.off
# Run/Step Section
net run-step-btn and2.run_step_resume.in0 and2.step.in0 <= hm2_7i76e.0.7i76.0.0.input-09
net idle-on and2.run_step_resume.in1 <= and2.idle.in1 <= halui.program.is-idle
# net pause.on and2.step.in1 <= halui.program.is-paused
# and2.step.in1 was added in the net pause-on statement in Pause/Resume Section
net run-sig halui.mode.auto halui.program.run <= and2.run_step_resume.out
net step-sig halui.program.step <= and2.step.out

net estop-out estop-latch.0.fault-out

# --- RED, GREEN AMBER WARNING LIGHTS ---

#Yellow Light
net yellow-in1 <= halui.machine.is-on => and2.idle.in0
net idle-on <= halui.program.is-idle => and2.idle.in1  
net yellow-out <= and2.idle.out
net yellow-out => hm2_7i76e.0.7i76.0.0.output-01 

#Green Light

net flash <= siggen.0.clock => and2.paused.in0
net green-flash <= and2.paused.out => xor2.green.in1
net green-on <= xor2.green.out 
#=> hm2_7i76e.0.7i76.0.0.output-03
#net green-on => hm2_7i76e.0.7i76.0.0.output-03
net green-on => hm2_7i76e.0.7i76.0.0.output-04
# add green light for switch

#Red Light
net pause-on hm2_7i76e.0.7i76.0.0.output-05 



#net estop-out hm2_7i76e.0.7i76.0.0.output-04


# Handheld/Aux I/O

# net ring-light-pulse <= hm2_7i76e.0.7i76.0.0.input-26
net ring-light-hh or2.ring-light.in0 <= hm2_7i76e.0.7i76.0.0.input-24
net ring-light-aux or2.ring-light.in1 <= hm2_7i76e.0.7i76.0.0.input-29

net ring-light-push toggle.1.in <= or2.ring-light.out
net ring-light toggle.1.out => hm2_7i76e.0.7i76.0.0.output-14

net air-push toggle.2.in <= hm2_7i76e.0.7i76.0.0.input-26
net air-output toggle.2.out => hm2_7i76e.0.7i76.0.0.output-13


net pdb-push toggle.3.in <= hm2_7i76e.0.7i76.0.0.input-21
net pdb-output toggle.3.out => hm2_7i76e.0.7i76.0.0.output-12

net coolant-auto <= hm2_7i76e.0.7i76.0.0.input-25
net coolant-on <= hm2_7i76e.0.7i76.0.0.input-27
net coolant-push toggle.4.in <= hm2_7i76e.0.7i76.0.0.input-23
net coolant-out toggle.4.out => hm2_7i76e.0.7i76.0.0.output-15
